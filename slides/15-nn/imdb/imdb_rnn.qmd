---
title: "IMDB Sentiment Analysis (Simple RNN)"
subtitle: "Biostat 203B"
author: "Dr. Hua Zhou @ UCLA"
date: today
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: true
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

## Setup

Display system information for reproducibility.

:::  {.panel-tabset}

#### Python

```{python}
import IPython
print(IPython.sys_info())
```

#### R

```{r}
sessionInfo()
```

:::

Load libraries.

::: {.panel-tabset}

#### Python

```{python}
# Plotting tool
import matplotlib.pyplot as plt
# Load Tensorflow and Keras
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
```

#### R

```{r}
library(keras)
```

:::


## Prepare data

From documentation:  

> Dataset of 25,000 movies reviews from IMDB, labeled by sentiment (positive/negative). Reviews have been preprocessed, and each review is encoded as a sequence of word indexes (integers). For convenience, words are indexed by overall frequency in the dataset, so that for instance the integer "3" encodes the 3rd most frequent word in the data. This allows for quick filtering operations such as: "only consider the top 10,000 most common words, but eliminate the top 20 most common words".

Retrieve IMDB data:

::: {.panel-tabset}

#### Python

```{python}
max_features = 10000 # to be consistent with lasso example
# Cut texts after this number of words (among top max_features most common words)
maxlen = 80
batch_size = 32

print('Loading data...')
(x_train, y_train), (x_test, y_test) = keras.datasets.imdb.load_data(
  num_words = max_features
  )
```

Sizes of training and test sets:
```{python}
print(len(x_train), 'train sequences')
print(len(x_test), 'test sequences')
```

We pad texts to `maxlen=80` words.
```{python}
print('Pad sequences (samples x time)')
x_train = keras.preprocessing.sequence.pad_sequences(x_train, maxlen = maxlen)
x_test = keras.preprocessing.sequence.pad_sequences(x_test, maxlen = maxlen)
print('x_train shape:', x_train.shape)
print('x_test shape:', x_test.shape)
```

#### R

```{r}
max_features <- 10000 # to be consistent with lasso example

# Cut texts after this number of words (among top max_features most common words)
maxlen <- 80  

cat('Loading data...\n')
imdb <- dataset_imdb(num_words = max_features)
imdb$train$x[[1]]
imdb$train$y[[1]]
```

Sizes of training and test sets:
```{r}
x_train <- imdb$train$x
y_train <- imdb$train$y
x_test <- imdb$test$x
y_test <- imdb$test$y

cat(length(x_train), 'train sequences\n')
cat(length(x_test), 'test sequences\n')
```

We pad texts to `maxlen=80` words.
```{r}
cat('Pad sequences (samples x time)\n')
x_train <- pad_sequences(x_train, maxlen = maxlen)
x_test <- pad_sequences(x_test, maxlen = maxlen)
cat('x_train shape:', dim(x_train), '\n')
cat('x_test shape:', dim(x_test), '\n')
```

:::

## Build model

::: {.panel-tabset}

#### Python

```{python}
model = keras.Sequential([
  layers.Embedding(max_features, 128),
  layers.SimpleRNN(units = 64),
  layers.Dense(units = 1, activation = 'sigmoid')
])

# try using different optimizers and different optimizer configs
model.compile(
  loss = 'binary_crossentropy',
  optimizer = 'adam',
  metrics = ['accuracy']
)

model.summary()
```

#### R

```{r}
model <- keras_model_sequential()
model %>%
  layer_embedding(input_dim = max_features, output_dim = 128) %>% 
  layer_simple_rnn(units = 64) %>% 
  layer_dense(units = 1, activation = 'sigmoid')

# Try using different optimizers and different optimizer configs
model %>% compile(
  loss = 'binary_crossentropy',
  optimizer = 'adam',
  metrics = c('accuracy')
)

summary(model)
```


:::

## Training

::: {.panel-tabset}

#### Python

```{python}
print('Train...')
history = model.fit(
  x_train, y_train,
  batch_size = batch_size,
  epochs = 15,
  validation_split = 0.2, 
  verbose = 2 # one line per epoch
)
```
Visualize training process:
```{python}
plt.figure()
plt.ylabel("Loss (training and validation)")
plt.xlabel("Training Epochs")
plt.ylim([0, 2])
plt.plot(history.history["loss"])
plt.plot(history.history["val_loss"])
plt.show()

plt.figure()
plt.ylabel("Accuracy (training and validation)")
plt.xlabel("Training Epochs")
plt.ylim([0, 1])
plt.plot(history.history["accuracy"])
plt.plot(history.history["val_accuracy"])
plt.show()
```

#### R

```{r}
batch_size <- 32

cat('Train...\n')
system.time({
history <- model %>% fit(
  x_train, y_train,
  batch_size = batch_size,
  epochs = 15,
  validation_split = 0.2,
  verbose = 2
)
})
```

Visualize training process:
```{r}
plot(history)
```

:::

## Testing

::: {.panel-tabset}

#### Python

```{python}
score, acc = model.evaluate(
  x_test, y_test,
  batch_size = batch_size,
  verbose = 2
)
print('Test score:', score)
print('Test accuracy:', acc)
```

#### R

```{r}
scores <- model %>% evaluate(
  x_test, y_test,
  batch_size = batch_size
)
```

```{r}
cat('Test score:', scores[[1]])
cat('Test accuracy', scores[[2]])
```

:::